package DemoClassify;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import edu.stanford.nlp.classify.Classifier;
import edu.stanford.nlp.classify.ColumnDataClassifier;
import edu.stanford.nlp.classify.LinearClassifier;
import edu.stanford.nlp.ling.Datum;
import edu.stanford.nlp.objectbank.ObjectBank;
import edu.stanford.nlp.stats.Counter;
import edu.stanford.nlp.util.ErasureUtils;
import Qwordnet.QWordNetDB;
import Corpus.Corpus;
import Corpus.CorpusLoader;
import Corpus.CorpusLoaderException;
import Corpus.Document;
import Corpus.TBODCorpusLoader;
import Corpus.TBODCorpusLoader.LabelSet;


public class Main {
	
	  public static void main(String[] args) throws ClassNotFoundException, IOException, CorpusLoaderException {
		  
		  	//Carga del TBODCorpus
		  	//System.out.println("Directorio ejecucion = " + System.getProperty("user.dir"));
		
		   	final TBODCorpusLoader loader = new TBODCorpusLoader(LabelSet.TWO_LABEL);
			final Corpus corpus = loader.load();
			List<myResult> ListRating = new ArrayList<myResult>();
			
			//Generación del corpus (.train y .test)
			CorpusTestGenerator2 myCTG = new CorpusTestGenerator2();
			myCTG.Generate(corpus);
			
			//Creación del Trainer
			ClassifyTrainer ct = new ClassifyTrainer("data/THOFUDemo2.prop");
			ct.SetTrainingExamples("data/THOFUDemo.train");
			List<String> Rating = new ArrayList<String>();
			ListRating = ct.SetTest("data/THOFUDemo.test");
			
			// Leer Labels originales
			String  tRating = "data/THOFUDemoClass.test";
			FileReader  RatingFile = new FileReader (tRating);
			BufferedReader br = new BufferedReader(RatingFile);
			String brline;
			int ss = 0;
		    while((brline=br.readLine())!=null){
		        System.out.println(brline);
		        	ListRating.get(ss++).setOriRes(brline.substring(0,2));
		    	
		    }
		    
		   // EscribirSecond(ListRating);
		   		    
		    
			    			    
			CorpusSecondGenerator CSG = new CorpusSecondGenerator();
			CSG.Generate(ListRating);
			 
			//////////////////////////////////////////

			ClassifyTrainer ct2 = new ClassifyTrainer("data/THOFUDemo2.prop");
			ct2.SetTrainingExamples("data/THOFUSecond.train");
			ct2.SetTest("data/THOFUSecond.test");
			
	  }

	private static void EscribirSecond(List<myResult> listRating) throws IOException {
		int TestSplit = 20; //%
		int Num_Test = 0;
		int Num_Train = 0;
		int CorpusMax= (listRating.size())*TestSplit/100;
		
		String  tFichero = "data/THOFUSecond.test";
		String  trFichero = "data/THOFUSecond.train";

		File  TrainFile = new File (trFichero);
		File  TestFile = new File (tFichero);
	
		BufferedWriter  trainf = new BufferedWriter (new FileWriter (TrainFile));
		BufferedWriter  testf = new BufferedWriter (new FileWriter (TestFile));
		
		for(int h = 0; h<listRating.size();h++){
		double rnd = Math.random()*100;
		
			
		if ((rnd > TestSplit) &&( Num_Test <=CorpusMax)){
		trainf.write(listRating.get(h).getOriRes() + listRating.get(h).getCalcRes() + "\n");
		Num_Train++;}
		else{
			testf.write(listRating.get(h).getOriRes() + listRating.get(h).getCalcRes() + "\n");

			//System.out.println(doc.getClassification() + " == " + doc.getRating() );
		Num_Test++;}
		}
		
		String resp = "Total items: " + (Num_Test+Num_Train) + "Total test items: " + Num_Test + "Total train items: " + Num_Train ;
		System.out.println("=====Second========");
		System.out.println(CorpusMax);
		System.out.println("Data files created");
		System.out.println("Total items: " + (Num_Test+Num_Train));
		System.out.println("Total test items: " + Num_Test);
		System.out.println("Total train items: " + Num_Train);
	}
}
