 package DemoClassify;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileReader;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import edu.stanford.nlp.classify.Classifier;
import edu.stanford.nlp.classify.ColumnDataClassifier;
import edu.stanford.nlp.classify.LinearClassifier;
import edu.stanford.nlp.ling.Datum;
import edu.stanford.nlp.objectbank.ObjectBank;
import edu.stanford.nlp.stats.Counter;
import edu.stanford.nlp.util.ErasureUtils;
import Qwordnet.QWordNetDB;
import Corpus.Corpus;
import Corpus.CorpusLoader;
import Corpus.CorpusLoaderException;
import Corpus.Document;
import Corpus.TBODCorpusLoader;
import Corpus.TBODCorpusLoader.LabelSet;

class ClassifierDemo {

  public static void main(String[] args) throws ClassNotFoundException, IOException, CorpusLoaderException {
	  int Tp =0;
	  int Fp = 0;
	final TBODCorpusLoader loader = new TBODCorpusLoader(LabelSet.TWO_LABEL);
	final Corpus corpus = loader.load();
	 List<myResult> ListRating = new ArrayList<myResult>();
	
	CorpusTestGenerator2 myCTG = new CorpusTestGenerator2();
	
	String results = myCTG.Generate(corpus);
    ColumnDataClassifier cdc = new ColumnDataClassifier("data/THOFUDemo2.prop");
    Classifier<String,String> cl =
        cdc.makeClassifier(cdc.readTrainingExamples("data/THOFUDemo.train"));
    
    List<String> Rating = new ArrayList<String>();
    String calRes = "";
    String  tRating = "data/THOFUDemoClass.test";
    FileReader  RatingFile = new FileReader (tRating);
    BufferedReader br = new BufferedReader(RatingFile);
    String  tLTrain = "data/THOFUDemoLabels.train";
    FileReader  TrainingFile = new FileReader (tLTrain);
    BufferedReader tf = new BufferedReader(TrainingFile);
    String brline;
    while((brline=br.readLine())!=null){
        System.out.println(brline);
    		myResult rs = new myResult(calRes,brline.substring(0,2));
    		ListRating.add(rs);
    }
    int jj=0;
    for (String line : ObjectBank.getLineIterator("data/THOFUDemo.test")) {
      Datum<String,String> d = cdc.makeDatumFromLine(line, 0);
      
      //System.out.println(line + "  ==>  " + cl.classOf(d));
      //System.out.println(line);
      //System.out.println(line.substring(0,4)+"  ==>  " + cl.classOf(d));
      System.out.println(cl.scoresOf(d));
      Counter<String> record = cl.scoresOf(d);
      String resultado = record.toString();
      resultado = resultado.substring(4, 9);
      //resultado = resultado.replace('.', ',');
      double i=Double.parseDouble(resultado);
      //int i1=(int)i;
      //float resInt = Float.parseFloat(i1);
      if(ListRating.get(jj).getOriRes().contains("VG"))
      { System.out.println("VG Found:  "+ i);}
      else if (ListRating.get(jj).getOriRes().contains("VP"))
      {System.out.println("VP Found:  "+ i);}
      else if (ListRating.get(jj).getOriRes().contains("FR"))
      {System.out.println("FR Found:  "+ i);}
     System.out.println(jj+"  Resultado: " + i + CalcularRating(i) + " ===> "+ ListRating.get(jj).getOriRes() +" ===> "+ cl.classOf(d));
     ListRating.get(jj++).setCalcRes(CalcularRating(i));
     
      Rating.add(cl.classOf(d));
    
   
      
      
      if(line.substring(0,4).contains(cl.classOf(d)))
      {
    	  Tp++;
      }
      else{ Fp++; }
      
     // demonstrateSerialization(args);
    
   
  }
    
    
    
    String example = "This is an example" ;
    //Datum<String,String> dd = cdc.makeDatumFromLine(arg0, arg1)
    //System.out.println(example + "  ==>  " + cl.classOf(dd)); 
   int[] Correct = {0,0,0,0,0};		//VP,PR,FR,GD,VG
   int[] SemiFailed = {0,0,0,0,0};
   int[] Failed = {0,0,0,0,0};
   
    //System.out.println(results);
    for(int o=0; o < ListRating.size();o++)
    {
    	switch(ListRating.get(o).getOriRes()) {
    	case "VP":
    		if(ListRating.get(o).getCalcRes().contains("VP")) {Correct[0]++;}
    		else if(ListRating.get(o).getCalcRes().contains("PR")) {SemiFailed[0]++;}
    		else {Failed[0]++;}
    		
    		break;
    	case "PR":
    		if(ListRating.get(o).getCalcRes().contains("PR")) {Correct[1]++;}
    		else if(ListRating.get(o).getCalcRes().contains("VP")) {SemiFailed[1]++;}
    		else {Failed[1]++;}
    		break;
    	case "FR":
    		if(ListRating.get(o).getCalcRes().contains("FR")) {Correct[2]++;}
    		//else if(ListRating.get(o).getCalcRes().contains("PR")) {SemiFailed++;}
    		else {Failed[2]++;}
    		break;
    	case "GD":
    		if(ListRating.get(o).getCalcRes().contains("GD")) {Correct[3]++;}
    		else if(ListRating.get(o).getCalcRes().contains("VG")) {SemiFailed[3]++;}
    		else {Failed[3]++;}
    		break;
    	case "VG":
    		if(ListRating.get(o).getCalcRes().contains("VG")) {Correct[4]++;}
    		else if(ListRating.get(o).getCalcRes().contains("GD")) {SemiFailed[4]++;}
    		else {Failed[4]++;}
    		break;	
    	}
    }
    
    System.out.println("Éxito[VP]: " + Correct[0]);
    System.out.println("Fallo[VP]: " + Failed[0]);
    System.out.println("SemiFallo[VP]: " + SemiFailed[0]);
    System.out.println("=================");
    System.out.println("Éxito[PR]: " + Correct[1]);
    System.out.println("Fallo[PR]: " + Failed[1]);
    System.out.println("SemiFallo[PR]: " + SemiFailed[1]);
    System.out.println("=================");
    System.out.println("Éxito[FR]: " + Correct[2]);
    System.out.println("Fallo[FR]: " + Failed[2]);
    System.out.println("SemiFallo[FR]: " + SemiFailed[2]);
    System.out.println("=================");
    System.out.println("Éxito[GD]: " + Correct[3]);
    System.out.println("Fallo[GD]: " + Failed[3]);
    System.out.println("SemiFallo[GD]: " + SemiFailed[3]);
    System.out.println("=================");
    System.out.println("Éxito[VG]: " + Correct[4]);
    System.out.println("Fallo[VG]: " + Failed[4]);
    System.out.println("SemiFallo[VG]: " + SemiFailed[4]);
    System.out.println("=================");

 
   
  
   
   
 
 
  }

private static String CalcularRating(double i) {
	String resp ="";
	if(i < -2) { resp = "VP";}
	else if(i < 1) {resp = "PR";}
	else if(i < 4) {resp = "FR";}
	else if(i < 7) {resp = "GD";}
	else {resp = "VG";}
	return resp;
}

  
/*
  public static void main(String[] args) 
    throws IOException, ClassNotFoundException
  {
    ColumnDataClassifier cdc = new ColumnDataClassifier("examples/cheese2007.prop");
    Classifier<String,String> cl =
        cdc.makeClassifier(cdc.readTrainingExamples("examples/cheeseDisease.train"));

    // Exhibit serialization and deserialization working. Serialized to bytes in memory for simplicity
    System.out.println(); System.out.println();
    ByteArrayOutputStream baos = new ByteArrayOutputStream();
    ObjectOutputStream oos = new ObjectOutputStream(baos);
    oos.writeObject(cl);
    oos.close();
    byte[] object = baos.toByteArray();
    ByteArrayInputStream bais = new ByteArrayInputStream(object);
    ObjectInputStream ois = new ObjectInputStream(bais);
    LinearClassifier<String,String> lc = ErasureUtils.uncheckedCast(ois.readObject());
    ois.close();
    ColumnDataClassifier cdc2 = new ColumnDataClassifier("examples/cheese2007.prop");

    for (String line : ObjectBank.getLineIterator("examples/cheeseDisease.test")) {
      Datum<String,String> d = cdc.makeDatumFromLine(line, 0);
      Datum<String,String> d2 = cdc2.makeDatumFromLine(line, 0);
      System.out.println(line + "  =origi=>  " + cl.classOf(d));
      System.out.println(line + "  =deser=>  " + lc.classOf(d2));
    }
  }  */
}